# PostgreSQL + pgvector: Product Similarity Search Demo

This repository contains a quick demo showing how to:
- Run PostgreSQL with the **pgvector** extension in Docker
- Create a table with vector embeddings
- Insert sample products with embeddings
- Create an HNSW index for Approximate Nearest Neighbor (ANN) search
- Run similarity queries using Euclidean distance

---

## üìÇ Files in this Repo

| File                  | Description |
|-----------------------|-------------|
| `1.docker-setup.sh`     | Script to pull and run PostgreSQL with pgvector in Docker |
| `2.sample-products.sql` | SQL commands to enable pgvector, create table, insert data, index vectors, and run similarity queries |

---

## üöÄ Quick Start

### 1Ô∏è‚É£ Start PostgreSQL with pgvector
bash docker-setup.sh

2Ô∏è‚É£ Connect to YugabyteDB PostgreSQL
docker exec -it pgvector-quick psql -U postgres

3Ô∏è‚É£ Run the SQL Demo
Inside the psql shell, copy-paste or run:

\i sample-products.sql

This will:

Enable the pgvector extension
Create a products table with a VECTOR(3) column
Insert 4 sample products with embeddings
Create an HNSW index on the vector column
Run a similarity search to find the 3 closest products to [0.88,0.12,0.2]
üîç Example Query Output
Example results from the similarity search:

 id |   name    |            description             | description_embedding
----+-----------+------------------------------------+-----------------------
  1 | iPhone 14 | Smartphone with great camera       | [0.9, 0.1, 0.2]
  2 | Pixel 7   | Affordable phone with good photos  | [0.85, 0.15, 0.25]
  3 | Galaxy S22| Android phone with sharp display   | [0.8, 0.2, 0.1]
(3 rows)
üìö Notes
<-> is the Euclidean distance operator in pgvector.
VECTOR(3) specifies 3D vectors (change as per your embeddings).
HNSW indexing (USING hnsw) speeds up search for large datasets.

You can adapt this example to store embeddings from models like OpenAI, Cohere, or Sentence Transformers.